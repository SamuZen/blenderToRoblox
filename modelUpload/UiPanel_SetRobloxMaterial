import bpy

# Função para adicionar ou modificar a propriedade 'Roblox Material' no objeto
def add_or_modify_roblox_material(obj, material_type):
    if 'Roblox Material' in obj:
        obj['Roblox Material'] = material_type
    else:
        bpy.context.object['Roblox Material'] = material_type

# Função para remover a propriedade 'Roblox Material' do objeto
def remove_roblox_material(obj):
    if 'Roblox Material' in obj:
        del obj['Roblox Material']

# Função para atualizar o label com o valor da propriedade 'Roblox Material'
def update_label(layout, obj):
    if 'Roblox Material' in obj:
        layout.label(text=f"Roblox Material: {obj['Roblox Material']}")
    else:
        layout.label(text="Roblox Material: N/A")

class OBJECT_PT_RobloxMaterialPanel(bpy.types.Panel):
    bl_label = "Roblox Material Panel"
    bl_idname = "OBJECT_PT_roblox_material"
    bl_space_type = 'PROPERTIES'
    bl_region_type = 'WINDOW'
    bl_context = "object"

    def draw(self, context):
        layout = self.layout
        obj = bpy.context.object

        # Dropdown com opções de materiais
        layout.prop(obj, "roblox_material_dropdown", text="Material Type")

        # Botão para aplicar o material
        row = layout.row()
        row.operator("object.apply_roblox_material", text="Apply Material")

        # Botão para remover o material
        row = layout.row()
        row.operator("object.remove_roblox_material", text="Remove Material")

        # Label para mostrar o valor atual da propriedade 'Roblox Material'
        update_label(layout, obj)

# Classe para o operador de aplicar material
class OBJECT_OT_ApplyRobloxMaterial(bpy.types.Operator):
    bl_idname = "object.apply_roblox_material"
    bl_label = "Apply Roblox Material"

    def execute(self, context):
        obj = bpy.context.object
        material_type = obj.roblox_material_dropdown
        add_or_modify_roblox_material(obj, material_type)
        return {'FINISHED'}

# Classe para o operador de remover material
class OBJECT_OT_RemoveRobloxMaterial(bpy.types.Operator):
    bl_idname = "object.remove_roblox_material"
    bl_label = "Remove Roblox Material"

    def execute(self, context):
        obj = bpy.context.object
        remove_roblox_material(obj)
        return {'FINISHED'}

# Registrar classes
def register():
    bpy.utils.register_class(OBJECT_PT_RobloxMaterialPanel)
    bpy.utils.register_class(OBJECT_OT_ApplyRobloxMaterial)
    bpy.utils.register_class(OBJECT_OT_RemoveRobloxMaterial)
    bpy.types.Object.roblox_material_dropdown = bpy.props.EnumProperty(
        items=[
            ("Plastic", "Plastic", ""),
            ("Wood", "Wood", ""),
            ("Slate", "Slate", ""),
            ("Concrete", "Concrete", ""),
            ("CorrodedMetal", "Corroded Metal", ""),
            ("DiamondPlate", "Diamond Plate", ""),
            ("Foil", "Foil", ""),
            ("Grass", "Grass", ""),
            ("Ice", "Ice", ""),
            ("Marble", "Marble", ""),
            ("Granite", "Granite", ""),
            ("Brick", "Brick", ""),
            ("Pebble", "Pebble", ""),
            ("Sand", "Sand", ""),
            ("Fabric", "Fabric", ""),
            ("SmoothPlastic", "Smooth Plastic", ""),
            ("Metal", "Metal", ""),
            ("WoodPlanks", "Wood Planks", ""),
            ("Cobblestone", "Cobblestone", ""),
            ("Air", "Air", ""),
            ("Water", "Water", ""),
            ("Rock", "Rock", ""),
            ("Glacier", "Glacier", ""),
            ("Snow", "Snow", ""),
            ("Cement", "Cement", ""),
            ("Asphalt", "Asphalt", ""),
            ("LeafyGrass", "Leafy Grass", ""),
            ("Salt", "Salt", ""),
            ("Limestone", "Limestone", ""),
            ("Pavement", "Pavement", ""),
            ("Brickwork", "Brickwork", ""),
            ("Glow", "Glow", ""),
            ("Neon", "Neon", ""),
            ("Glass", "Glass", ""),
            ("Metallic", "Metallic", ""),
            ("Plaster", "Plaster", ""),
            ("Foam", "Foam", ""),
            ("SmoothMetal", "Smooth Metal", ""),
            ("WoodenPlanks", "Wooden Planks", ""),
            ("Cobble", "Cobble", ""),
            ("Diamond", "Diamond", ""),
            ("Sandstone", "Sandstone", ""),
            ("Pebblestone", "Pebblestone", ""),
            ("Custom", "Custom", "")
        ],
        name="Material Type"
    )

def unregister():
    bpy.utils.unregister_class(OBJECT_PT_RobloxMaterialPanel)
    bpy.utils.unregister_class(OBJECT_OT_ApplyRobloxMaterial)
    bpy.utils.unregister_class(OBJECT_OT_RemoveRobloxMaterial)
    del bpy.types.Object.roblox_material_dropdown

if __name__ == "__main__":
    register()
